
################<object class 생성자 정의> ####################
-------------------------------------------------------------------------------------
<1. 모델 생성>

vector_Model.emplace_back()

 - 인자는 unique_ptr의 형태이다
 - () 안에 std::make_unique 를 사용해 넣어줄 수 있다.
 - 또는 () 안에 그냥 포인터로 생성하는 것처럼 넣으면 된다.

ex> vector_Cmodel.emplace_back(std::make_unique<CModel_cube>(4, size));
ex> vector_CModel.emplace_back(new CModel_cube(4, size));

 - 모델의 인자는 각각 int , vec3, vec3 형태로 int 레이아웃의 크기 / vec3 모델의 크기 / vec3 모델의 색상이다.
   레이아웃의 크기 ( 1 : vertex / 2 : color / 3 : normal(light) / 4 : uv(texture))

 - 하위 레이아웃은 자동으로 따라온다.
ex> 4를 선택하면 1, 2, 3은 자동으로 쉐이더에 들어간다.
ex> 3을 선택하면 1, 2,만 들어가고 4는 들어가지 않는다.

--------------------------------------------------------------------------------------
<2. 모델 좌표 설정>

vector_ModelPosition.emplace_back()

 - 인자는 glm::vec3 의 형태이다
 - () 안에 vec3의 형태로 모델 좌표계의 위치를 넣어주면 된다.

ex> vector_CModel.emplack_back(glm::vec3{0, 0, 0});

 - 모델의 개수만큼 반복해준다.

--------------------------------------------------------------------------------------
<3. SetBuffer() >

SetBuffer()

 - 인자 X 반환값 X
 - 1, 2번을 토대로 버퍼를 생성해준다.

--------------------------------------------------------------------------------------
<4. 텍스처 부르기 (텍스처를 사용한다면)>
std::vector<const char*>의 형태로 변수를  선언한다.
변수에 텍스쳐의 이름을 넣는다.
AddTexture함수에 텍스처들을 넣는다.

ex> 
std::vector<const char*> s;
s.emplace_back("texture1.bmp");
s.emplace_back("texture2.bmp");
AddTexture(0, s);

AddTexture(index, files) - index : 모델의 인덱스 / files : 텍스처 파일의 벡터

-------------------------------------------------------------------------------------
<5. 쉐이더 생성하기>

CreateShader();

 - 인자 X 반환값 X
 - 위의 순서들을 토대로 쉐이더를 생성한다.
##############################################################
