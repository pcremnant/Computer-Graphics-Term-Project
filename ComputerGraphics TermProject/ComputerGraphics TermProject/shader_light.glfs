#version 330

in vec3 ex_Color;
in vec3 FragPos;
in vec3 Normal;
out vec4 FragColor;

uniform vec3 viewPos;

uniform vec3 lightPos;
uniform vec3 lightColor;
uniform float lightPower;

void main()
{
	float distance = sqrt(pow(FragPos.x - lightPos.x, 2) + pow(FragPos.y - lightPos.y, 2) + pow(FragPos.z - lightPos.z, 2));

	vec3 ambientLight = vec3(0.2, 0.2, 0.2);
	vec3 ambient = ambientLight * lightColor;

	vec3 DiffuseNormal = Normal;
	vec3 DiffuseLightDir = normalize(lightPos - FragPos);
	float DiffuseLight = max(dot(DiffuseNormal, DiffuseLightDir), 0.0);
	vec3 diffuse = DiffuseLight * lightColor;

	int shiniess = 32;
	vec3 SpecularNormal = Normal;
	vec3 SpecularLightDir = normalize(lightPos - FragPos);
	vec3 viewDir = normalize(FragPos - viewPos);
	vec3 reflectDir = reflect (SpecularLightDir, SpecularNormal);
	float specularColor = max(dot(viewDir, reflectDir), 0.0);
	vec3 specular = specularColor * lightColor;
	if (dot(SpecularLightDir, SpecularNormal)<0)
		specular = vec3(0,0,0);

	float phongLightPower = 0;
	if (distance > lightPower)
		phongLightPower = 0;
	else
		phongLightPower = (lightPower - distance) / lightPower;
	
	
	vec3 result = (ambient + diffuse + specular) * phongLightPower * ex_Color;
	FragColor = vec4(result, 1.0);
}