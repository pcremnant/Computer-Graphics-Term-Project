#version 330

in vec3 ex_Color;
in vec3 ex_FragPos;
in vec3 ex_Normal;
in vec2 ex_TexCoord;
in float ex_TexIndex;

out vec4 FragColor;

uniform vec3 viewPos;

uniform vec3 lightPos;
uniform vec3 lightColor;
uniform float lightPower;

uniform sampler2D texture1;
uniform sampler2D texture2;
uniform sampler2D texture3;
uniform sampler2D texture4;
uniform sampler2D texture5;
uniform sampler2D texture6;

void main()
{
	float distance = sqrt(pow(ex_FragPos.x - lightPos.x, 2) + pow(ex_FragPos.y - lightPos.y, 2) + pow(ex_FragPos.z - lightPos.z, 2));

	vec3 ambientLight = vec3(1, 1, 1);
	vec3 ambient = ambientLight * lightColor;

	vec3 DiffuseNormal = ex_Normal;
	vec3 DiffuseLightDir = normalize(lightPos - ex_FragPos);
	float DiffuseLight = max(dot(DiffuseNormal, DiffuseLightDir), 0.0);
	vec3 diffuse = DiffuseLight * lightColor;

	int shiniess = 32;
	vec3 SpecularNormal = ex_Normal;
	vec3 SpecularLightDir = normalize(lightPos - ex_FragPos);
	vec3 viewDir = normalize(ex_FragPos - viewPos);
	vec3 reflectDir = reflect (SpecularLightDir, SpecularNormal);
	float specularLight = max(dot(viewDir, reflectDir), 0.0);
	vec3 specular = specularLight * lightColor;

	if (dot(SpecularLightDir, SpecularNormal)<0)
		specular = vec3(0,0,0);

	float phongLightPower = 0;
	if (distance > lightPower)
		phongLightPower = 0;
	else
		phongLightPower = (lightPower - distance) / lightPower;
	
	if (-0.5f <= ex_TexIndex && ex_TexIndex <= 0.5f)
		FragColor = texture (texture1, ex_TexCoord);
	else if (0.5f <= ex_TexIndex && ex_TexIndex <= 1.5f)
		FragColor = texture (texture2, ex_TexCoord);
	else if (1.5f <= ex_TexIndex && ex_TexIndex <= 2.5f)
		FragColor = texture (texture3, ex_TexCoord);
	else if (2.5f <= ex_TexIndex && ex_TexIndex <= 3.5f)
		FragColor = texture (texture4, ex_TexCoord);
	else if (3.5f <= ex_TexIndex && ex_TexIndex <= 4.5f)
		FragColor = texture (texture5, ex_TexCoord);
	else if (4.5f <= ex_TexIndex && ex_TexIndex <= 5.5f)
		FragColor = texture (texture6, ex_TexCoord);


	vec3 result = (ambient + diffuse + specular) * phongLightPower * vec3(FragColor.xyz);
	FragColor = vec4(result, 1.0);
}